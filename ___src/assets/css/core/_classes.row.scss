/*
 |--------------------------------------------------------------------------
 |  Row Classes
 |--------------------------------------------------------------------------
 */

// Imports
@import '../../../../node_modules/include-media/dist/include-media';
@import '../tools/mixin.make-row';
@import '../tools/mixin.make-col-padding';
@import '../tools/mixin.make-col-gap';
@import 'settings.variables';
@import 'settings.testing';

// Default Class Settings
[class*='#{$bk-prefix}-row'] {
  @if $bk-legacy == true {
    @include make-row();
    display: flex;
    flex-flow: row wrap;
    flex: 1 1 0;
  }

  @if $bk-cssgrid == true {
    display: grid;

    @supports (display: grid) {
      margin-left: 0;
      margin-right: 0;
    }
  }

  @if $bk-testing == true {
    @extend %styling;
  }
}

[class*='#{$bk-prefix}-row']:not(.no-padding) {
  > [class*='#{$bk-prefix}-col'] {
    @if $bk-legacy == true {
      @include make-col-padding();
    }

    @if $bk-cssgrid == true {
      @include make-col-padding(0);
    }
  }

  @if $bk-cssgrid == true {
    @include make-col-gap();
  }
}

// Creating Row Classes
@each $key, $value in $bk-breakpoints {
  $from: map-get($value, from);
  $cols: map-get($value, cols);
  $prefix: $bk-prefix;

  @if $key == 'min' {
    @include media('>=#{$from}') {
      // Row Classes
      @for $i from 1 through $cols {
        .#{$prefix}-row-#{$i} {
          @if $bk-cssgrid == true {
            grid-template-columns: repeat(#{$i}, 1fr);
          }
        }
      }
    }
  } @else if $key != 'min' {
    @include media('>=#{$from}') {
      // Row Classes
      @for $i from 1 through $cols {
        .#{$prefix}-row-#{$key}-#{$i} {
          @include make-row($i);
        }
      }
    }
  }
}
