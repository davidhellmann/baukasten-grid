{"version":3,"file":"../cssgrid.css","sources":["cssgrid.scss","_functions.scss","_grid.scss","_variables.scss","_mixins.scss"],"sourcesContent":["/*\n |--------------------------------------------------------------------------\n |  cssgrid.scss\n |--------------------------------------------------------------------------\n */\n\n$bk-grid-settings-custom: (\n  cssgrid: true,\n  cssgrid-fallback: false,\n  flexboxgrid: false,\n  testing: true,\n  prefix: 'o',\n  units: (\n    gutter: 8px,\n    gutter-min-factor: 1,\n    gutter-max-factor: 2,\n    gutter-min-vertical-factor: 1,\n    gutter-max-vertical-factor: 2\n  ),\n  breakpoints: (\n    min: (from: 320px, to: 399px, cols: 6),\n    xs:  (from: 400px, to: 599px, cols: 6),\n    s:   (from: 600px, to: 799px, cols: 24),\n    m:   (from: 800px, to: 999px, cols: 24),\n    l:   (from: 1000px, to: 1439px, cols: 48),\n    max: (from: 1440px, to: 0, cols: 48)\n  )\n);\n\n// Imports\n@import 'functions';\n@import 'grid';\n@import 'variables';\n@import 'mixins';\n","/*\n |--------------------------------------------------------------------------\n |  Map Deep Get Function\n |--------------------------------------------------------------------------\n */\n\n@function map-deep-get($map, $keys...) {\n    @each $key in $keys {\n        $map: map-get($map, $key);\n    }\n    @return $map;\n}\n\n\n/*\n |--------------------------------------------------------------------------\n |  Map Deep Get Function\n |--------------------------------------------------------------------------\n */\n\n@function recursive-map-merge($map1, $map2) {\n  @if ((type-of($map1) == map or type-of($map1) == list) and (type-of($map2) == map or type-of($map2) == list)) {\n    $result: $map1;\n    @each $key, $value in $map2 {\n      @if (type-of(map-get($result, $key)) == map and type-of($value) == map) {\n        $result: map-merge($result, ($key: recursive-map-merge(map-get($result, $key), $value)));\n      }\n      @else {\n        $result: map-merge($result, ($key: $value));\n      }\n    }\n    @return $result;\n  }\n  @else {\n    @warn 'recursive-map-merge() expects it\\'s parameters to be map types!';\n    @return null;\n  }\n}\n\n\n/*\n |--------------------------------------------------------------------------\n |  Strip Unit Function\n |--------------------------------------------------------------------------\n */\n\n@function strip-unit($value) {\n  @return $value / ($value * 0 + 1);\n}\n","/*\n |--------------------------------------------------------------------------\n |  Default Grid Settings\n |--------------------------------------------------------------------------\n */\n\n$bk-grid-settings-custom: null !default;\n$bk-grid-settings: (\n  cssgrid: true,\n  cssgrid-fallback: true,\n  flexboxgrid: false,\n  testing: true,\n  prefix: 'o',\n  units: (\n    gutter: 8px,\n    gutter-min-factor: 1,\n    gutter-max-factor: 2,\n    gutter-min-vertical-factor: 1,\n    gutter-max-vertical-factor: 2\n  ),\n  breakpoints: (\n    min: (from: 320px, to: 399px, cols: 6),\n    xs:  (from: 400px, to: 599px, cols: 6),\n    s:   (from: 600px, to: 799px, cols: 24),\n    m:   (from: 800px, to: 999px, cols: 24),\n    l:   (from: 1000px, to: 1439px, cols: 48),\n    max: (from: 1440px, to: 0, cols: 48)\n  )\n);\n\n// Merge Custom Map into Default Map\n@if $bk-grid-settings-custom != null {\n  $bk-grid-settings: map-merge($bk-grid-settings, $bk-grid-settings-custom);\n}\n\n// Check if Breakpoints exits\n@if map-has_key($bk-grid-settings, breakpoints) {\n\n  // Get Breakpoints to to check if min & max exists\n  $bk-breakpoints-map: map-deep-get($bk-grid-settings, breakpoints);\n\n  // Merge Breakpoints into breakpoints\n  $bk-breakpoints-custom: (breakpoints: map-deep-get($bk-grid-settings, breakpoints));\n\n  // When min and max is defined do the Action otherwise grumble\n  @if map_has_key($bk-breakpoints-map, min) and map_has_key($bk-breakpoints-map, max) {\n\n    // Clear default breakpoints if at least min and max are defined\n    $bk-grid-settings: map_remove($bk-grid-settings, breakpoints);\n\n    // Merge Custom Breakpoints into Map\n    $bk-grid-settings: recursive-map-merge($bk-grid-settings, $bk-breakpoints-custom);\n\n    // New empty Map\n    $bk-breakpoints: () !default;\n\n    // Loop over all Breakpoints\n    @each $key, $values in $bk-breakpoints-map {\n      // Get the From Value from the Breakpoint\n      $_breakpoint: map-get($values, from);\n\n      // Merge Key / Value into Map\n      $bk-breakpoints: map_merge($bk-breakpoints, ($key: $_breakpoint));\n    }\n\n    $breakpoints: $bk-breakpoints;\n  } @else {\n    @warn 'You have to set a \"min\" and \"max\" Breakpoint within your custom settings!';\n  }\n} @else {\n  @warn 'You have to set a \"min\" and \"max\" Breakpoint within your custom settings!';\n}\n\n\n","/*\n |--------------------------------------------------------------------------\n |  Variables\n |--------------------------------------------------------------------------\n */\n\n// Create Shorthand Class\n$bk-gs: $bk-grid-settings;\n\n// Get Prefix\n$bk-prefix: map-get($bk-gs, prefix);\n\n// Get Grid Settings\n$bk-flexboxgrid: map-deep-get($bk-gs, flexboxgrid);\n$bk-cssgrid: map-deep-get($bk-gs, cssgrid);\n$bk-cssgrid-fallback: map-deep-get($bk-gs, cssgrid-fallback);\n$bk-testing: map-deep-get($bk-gs, testing);\n\n// Get Breakpoints\n$bk-breakpoints: map-deep-get($bk-gs, breakpoints);\n\n// Get Min and Max Cols\n$bk-colsMin: map-deep-get($bk-gs, breakpoints, min, cols);\n$bk-colsMax: map-deep-get($bk-gs, breakpoints, max, cols);\n\n// Get Min and Max Width\n$bk-minWidth: map-deep-get($bk-gs, breakpoints, min, from);\n$bk-maxWidth: map-deep-get($bk-gs, breakpoints, max, from);\n\n// Get Gutters\n$bk-gutter: map-deep-get($bk-gs, units, gutter);\n$bk-gutterMin: $bk-gutter * map-deep-get($bk-gs, units, gutter-min-factor);\n$bk-gutterMax: $bk-gutter * map-deep-get($bk-gs, units, gutter-max-factor);\n$bk-gutterMinVertical: $bk-gutter * map-deep-get($bk-gs, units, gutter-min-vertical-factor);\n$bk-gutterMaxVertical: $bk-gutter * map-deep-get($bk-gs, units, gutter-max-vertical-factor);\n\n// Class Errors\n$bk-error-shadow: inset 0 0 0 2px red;\n","/*\n |--------------------------------------------------------------------------\n |  Center Mixin\n |--------------------------------------------------------------------------\n */\n\n@mixin center {\n  margin-left: auto;\n  margin-right: auto;\n}\n\n\n/*\n |--------------------------------------------------------------------------\n |  Fluid Mixin\n |--------------------------------------------------------------------------\n */\n\n// Mixin\n@mixin fluid($min-value, $max-value, $properties: null, $min-vw: $bk-minWidth, $max-vw: $bk-maxWidth) {\n  @if ($properties != null) {\n    @each $property in $properties {\n      #{$property}: $min-value;\n    }\n\n    @media screen and (min-width: $min-vw) {\n      @each $property in $properties {\n        #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / (#{strip-unit($max-vw - $min-vw)}));\n      }\n    }\n\n    @media screen and (min-width: $max-vw) {\n      @each $property in $properties {\n        #{$property}: $max-value;\n      }\n    }\n  }\n}\n\n// Shorthand Version\n@mixin f($args...) {\n  @include fluid($args...);\n}\n\n\n/*\n |--------------------------------------------------------------------------\n |  Make Col Padding Mixin\n |--------------------------------------------------------------------------\n */\n\n// Mixin\n@mixin make-col-padding($factor: 1) {\n  $gutterMin: $factor * $bk-gutterMin;\n  $gutterMax: $factor * $bk-gutterMax;\n\n  @include f($gutterMin, $gutterMax, padding-left padding-right);\n}\n\n\n/*\n |--------------------------------------------------------------------------\n |  Make Col Position Mixin\n |--------------------------------------------------------------------------\n */\n\n// Mixin\n@mixin col-pos($cols: auto, $context: 1) {\n  @if $cols != auto {\n    $cols: ceil($cols);\n  }\n\n  @if $bk-cssgrid == true {\n    grid-column-start: $cols;\n  }\n}\n\n\n/*\n |--------------------------------------------------------------------------\n |  Make Col Mixin\n |--------------------------------------------------------------------------\n */\n\n// Mixin\n@mixin make-col($cols: 1, $context: 1, $sassMode: true) {\n  // Calculate the Context\n  $width: $cols / $context * 100%;\n\n  // Check if SassMode active\n  @if $sassMode == false  {\n    // Set Flexbox Settings when CSS Grid is no active\n    @if $bk-cssgrid == false or $bk-cssgrid-fallback == true {\n      flex: 0 1 $width;\n      width: $width;\n\n      .use-flexbox > & {\n        flex: 0 1 $width;\n        width: $width;\n      }\n    }\n\n    // Set CSS Grid Settings\n    @if $bk-cssgrid == true {\n      @if $bk-flexboxgrid == true or $bk-cssgrid-fallback == true {\n        width: auto;\n      }\n      grid-column-end: span ceil($cols);\n    }\n\n  } @else {\n    // Set Flexbox Settings when CSS Grid is no active\n    @if $bk-cssgrid == false {\n      position: relative;\n      min-height: 1px;\n      flex: 0 1 $width;\n      width: $width;\n    }\n\n    // Set CSS Grid Settings\n    @if $bk-cssgrid == true {\n      grid-column-start: auto;\n      grid-column-end: span ceil($cols);\n    }\n  }\n}\n\n\n/*\n |--------------------------------------------------------------------------\n |  Make Row Margin Mixin\n |--------------------------------------------------------------------------\n */\n\n// Mixin\n@mixin make-row-margin($factor: 1) {\n  $factor: $factor * -1;\n  $gutterMin: $factor * $bk-gutterMin;\n  $gutterMax: $factor * $bk-gutterMax;\n\n  @include f($gutterMin, $gutterMax, margin-left margin-right);\n}\n\n\n/*\n |--------------------------------------------------------------------------\n |  Make Row Mixin\n |--------------------------------------------------------------------------\n */\n\n// Mixin\n@mixin make-row($cols: 1, $sassMode: true) {\n  @include make-row-margin();\n  @if $sassMode == true {\n    @if $bk-cssgrid == false or $bk-cssgrid-fallback == true {\n      flex-flow: row wrap;\n      flex: 1 1 0;\n    }\n  }\n\n  @if $bk-cssgrid == false {\n    display: flex;\n  }\n\n  @if $bk-cssgrid == true {\n    display: grid;\n    grid-template-columns: repeat($cols, 1fr);\n  }\n}\n\n\n/*\n |--------------------------------------------------------------------------\n |  Make Section Padding Mixin\n |--------------------------------------------------------------------------\n */\n\n// Mixin\n@mixin make-section-padding($factor: 1) {\n  @if $factor <= 1 {\n    $factor: $factor * 2;\n    $gutterMin: $factor * $bk-gutterMinVertical;\n    $gutterMax: $factor * $bk-gutterMaxVertical;\n\n    padding-top: 0;\n    @include f($gutterMin, $gutterMax, padding-bottom);\n\n  } @else {\n    $factor: $factor * 2;\n    $gutterMin: $bk-gutterMinVertical;\n    $gutterMax: $bk-gutterMaxVertical;\n\n    @include f($gutterMin * ($factor - 2), $gutterMax * ($factor - 2), padding-top);\n    @include f($gutterMin * ($factor), $gutterMax * ($factor), padding-bottom);\n  }\n}\n\n\n/*\n |--------------------------------------------------------------------------\n |  Make Section Mixin\n |--------------------------------------------------------------------------\n */\n\n// Mixin\n@mixin make-section($behaviour: 'fixed', $padding: true, $factor: 1) {\n  max-width: if($behaviour == 'fixed', $bk-maxWidth, none);\n  $factor: $factor * 2;\n  $gutterMin: $factor * $bk-gutterMin;\n  $gutterMax: $factor * $bk-gutterMax;\n\n  @if $padding == true {\n    @include f($gutterMin, $gutterMax, padding-left padding-right);\n  }\n}\n\n\n/*\n |--------------------------------------------------------------------------\n |  Vertical Spacing Mixin\n |--------------------------------------------------------------------------\n */\n\n@mixin make-vs($factor: 1) {\n  $factor: $factor * 2;\n  $gutterMin: $factor * $bk-gutterMin;\n  $gutterMax: $factor * $bk-gutterMax;\n\n  @include f($gutterMin, $gutterMax, margin-top);\n}\n"],"names":[],"mappings":""
}