/*
 |--------------------------------------------------------------------------
 |  Center Mixin
 |--------------------------------------------------------------------------
 */

@mixin center {
  margin-left: auto;
  margin-right: auto;
}


/*
 |--------------------------------------------------------------------------
 |  Fluid Mixin
 |--------------------------------------------------------------------------
 */

// Mixin
@mixin fluid($min-value, $max-value, $properties: null, $min-vw: $bk-minWidth, $max-vw: $bk-maxWidth) {
  @if ($properties != null) {
    @each $property in $properties {
      #{$property}: $min-value;
    }

    @media screen and (min-width: $min-vw) {
      @each $property in $properties {
        #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / (#{strip-unit($max-vw - $min-vw)}));
      }
    }

    @media screen and (min-width: $max-vw) {
      @each $property in $properties {
        #{$property}: $max-value;
      }
    }
  }
}

// Shorthand Version
@mixin f($args...) {
  @include fluid($args...);
}


/*
 |--------------------------------------------------------------------------
 |  Make Col Padding Mixin
 |--------------------------------------------------------------------------
 */

// Mixin
@mixin make-col-padding($factor: 1) {
  $gutterMin: $factor * $bk-gutterMin;
  $gutterMax: $factor * $bk-gutterMax;

  @include f($gutterMin, $gutterMax, padding-left padding-right);
}


/*
 |--------------------------------------------------------------------------
 |  Make Col Position Mixin
 |--------------------------------------------------------------------------
 */

// Mixin
@mixin col-pos($cols: auto, $context: 1) {
  @if $cols != auto {
    $cols: ceil($cols);
  }

  @if $bk-cssgrid == true {
    grid-column-start: $cols;
  }
}


/*
 |--------------------------------------------------------------------------
 |  Make Col Mixin
 |--------------------------------------------------------------------------
 */

// Mixin
@mixin make-col($cols: 1, $context: 1, $sassMode: true) {
  // Calculate the Context
  $width: $cols / $context * 100%;

  // Check if SassMode active
  @if $sassMode == false  {
    // Set Flexbox Settings when CSS Grid is no active
    @if $bk-cssgrid == false or $bk-cssgrid-fallback == true {
      flex: 0 1 $width;
      max-width: $width;
    }

    // Set CSS Grid Settings
    @if $bk-cssgrid == true {
      @if $bk-flexboxgrid == true or $bk-cssgrid-fallback == true {
        // max-width: none;
      }
      grid-column-end: span ceil($cols);
    }

  } @else {
    // Set Flexbox Settings when CSS Grid is no active
    @if $bk-cssgrid == false {
      min-height: 1px;
      flex: 0 1 $width;
      max-width: $width;
    }

    // Set CSS Grid Settings
    @if $bk-cssgrid == true {
      grid-column-start: auto;
      grid-column-end: span ceil($cols);
    }
  }

  .use-flexbox > & {
    flex: 0 1 $width;
    max-width: $width;
  }
}


/*
 |--------------------------------------------------------------------------
 |  Make Row Margin Mixin
 |--------------------------------------------------------------------------
 */

// Mixin
@mixin make-row-margin($factor: 1) {
  $factor: $factor * -1;
  $gutterMin: $factor * $bk-gutterMin;
  $gutterMax: $factor * $bk-gutterMax;

  @include f($gutterMin, $gutterMax, margin-left margin-right);
}


/*
 |--------------------------------------------------------------------------
 |  Make Row Mixin
 |--------------------------------------------------------------------------
 */

// Mixin
@mixin make-row($cols: 1, $sassMode: true) {
  @include make-row-margin();
  @if $sassMode == true {
    @if $bk-cssgrid == false or $bk-cssgrid-fallback == true {
      flex-flow: row wrap;
      flex: 1 1 0;
    }
  }

  @if $bk-cssgrid == false {
    display: flex;
  }

  @if $bk-cssgrid == true {
    display: grid;
    grid-template-columns: repeat($cols, 1fr);
  }
}


/*
 |--------------------------------------------------------------------------
 |  Make Section Padding Mixin
 |--------------------------------------------------------------------------
 */

// Mixin
@mixin make-section-padding($factor: 1) {
  @if $factor <= 1 {
    $factor: $factor * 2;
    $gutterMin: $factor * $bk-gutterMinVertical;
    $gutterMax: $factor * $bk-gutterMaxVertical;

    padding-top: 0;
    @include f($gutterMin, $gutterMax, padding-bottom);

  } @else {
    $factor: $factor * 2;
    $gutterMin: $bk-gutterMinVertical;
    $gutterMax: $bk-gutterMaxVertical;

    @include f($gutterMin * ($factor - 2), $gutterMax * ($factor - 2), padding-top);
    @include f($gutterMin * ($factor), $gutterMax * ($factor), padding-bottom);
  }
}


/*
 |--------------------------------------------------------------------------
 |  Make Section Mixin
 |--------------------------------------------------------------------------
 */

// Mixin
@mixin make-section($behaviour: 'fixed', $padding: true, $factor: 1) {
  max-width: if($behaviour == 'fixed', $bk-maxWidth, none);
  $factor: $factor * 2;
  $gutterMin: $factor * $bk-gutterMin;
  $gutterMax: $factor * $bk-gutterMax;

  @if $padding == true {
    @include f($gutterMin, $gutterMax, padding-left padding-right);
  }
}


/*
 |--------------------------------------------------------------------------
 |  Vertical Rhythm Mixin
 |--------------------------------------------------------------------------
 */

@mixin make-vr($factor: 1) {
  $factor: $factor * 2;
  $gutterMin: $factor * $bk-gutterMin;
  $gutterMax: $factor * $bk-gutterMax;

  @include f($gutterMin, $gutterMax, margin-top);
}


/*
 |--------------------------------------------------------------------------
 |  Col Start At Mixin
 |--------------------------------------------------------------------------
 */

@mixin col-offset($cols: 1, $context: 1, $sassMode: true) {
  // Rounds to integer Numbers
  @if $cols != auto {
    $cols: ceil($cols);
  }

  // Calculate the Context
  $offset: $cols  / $context * 100%;

  @if $sassMode == true {
    @if $bk-cssgrid == false or $bk-cssgrid-fallback == true {
      margin-left: $offset;
    }
  }

  @if $bk-cssgrid == false {
    margin-left: $offset;
  }

  @if $bk-cssgrid == true {
    grid-column-start: $cols + 1;
  }

  .use-flexbox > & {
    margin-left: $offset;
  }
}


/*
 |--------------------------------------------------------------------------
 |  Col Push Mixin
 |--------------------------------------------------------------------------
 */

@mixin col-push($cols: 1, $context: 1, $sassMode: true) {
  // Rounds to integer Numbers
  @if $cols != auto {
    $cols: ceil($cols);
  }

  // Calculate the Context
  $offset: $cols  / $context * 100%;
  left: $offset;
}


/*
 |--------------------------------------------------------------------------
 |  Col Pull Mixin
 |--------------------------------------------------------------------------
 */

@mixin col-pull($cols: 1, $context: 1, $sassMode: true) {
  // Rounds to integer Numbers
  @if $cols != auto {
    $cols: ceil($cols);
  }

  // Calculate the Context
  $offset: $cols  / $context * 100%;

  @if $sassMode == true {
    @if $bk-cssgrid == false or $bk-cssgrid-fallback == true {
      left: -$offset;
    }
  }

  @if $bk-cssgrid == false {
    // Calculate the Context
    left: -$offset;
  }

  @if $bk-cssgrid == true {
    grid-column-start: $cols;
  }
}
